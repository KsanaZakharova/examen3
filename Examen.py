1. Напишите функцию, которая будет принимать номер кредитной карты и
показывать только последние 4 цифры. Остальные цифры должны заменяться
звездочками

def nomer_card(x):
    return '*'* (len(x) - 4) + x[-4:]
nomer = int(input("Введите номер карты: "))
nomer = str(nomer)
print('номер карты: ',nomer_card(nomer))


2. Напишите функцию, которая проверяет: является ли слово палиндромом

def palindrom(text):
    return text[::-1] == text

while True:
    text = input('Введите текст: ')
    print(f'{text} является палиндромом' if palindrom(text) else 'не является палиндромом')


#3. Решите задачу
# Класс Tomato:
# 1. Создайте класс Tomato
# 2. Создайте статическое свойство states, которое будет содержать все стадии
# созревания помидора
# 3. Создайте метод __init__(), внутри которого будут определены два динамических
# protected свойства: 1) _index - передается параметром и 2) _state - принимает первое
# значение из словаря states
# 4. Создайте метод grow(), который будет переводить томат на следующую стадию
# созревания
# 5. Создайте метод is_ripe(), который будет проверять, что томат созрел (достиг
# последней стадии созревания)
class Tomato:
    states1 = 'posev'
    states2 = 'rassada'
    states3 = 'spelost'
    states4 = 'sozrevanie_plodov'
    states5 = 'sbor_urogay'

    def __init__(self, index):
        self._index = index
        self._state = states1

    def grow(self, prom_test):
        prom_test = int(input("Введите номер стадии созревания(1-5): "))
        if prom_test == 1:
            print('Следущая стадия 2')
        elif prom_test == 2:
            print('Следущая стадия 3')
        elif prom_test == 3:
            print('Следущая стадия 4')
        elif prom_test == 4:
            print('Следущая стадия последняя!')
        elif prom_test == 5:
            print('Сбор урожая!')

    def is_ripe(self, contor_test):

        if contr_test == 5:
            print('Томаты созрели, можно собирать.')
        else:
            print("Томаты не созрели")

# Класс TomatoBush
# 1. Создайте класс TomatoBush
# 2. Определите метод __init__(), который будет принимать в качестве параметра
# количество томатов и на его основе будет создавать список объектов класса
# Tomato. Данный список будет храниться внутри динамического свойства tomatoes.
# 3. Создайте метод grow_all(), который будет переводить все объекты из списка
# томатов на следующий этап созревания
# 4. Создайте метод all_are_ripe(), который будет возвращать True, если все томаты из
# списка стали спелыми
# 5. Создайте метод give_away_all(), который будет чистить список томатов после
# сбора урожая
#self.tomatoes = [Tomato(i) for i in range(num)]
class TomatoBush:
    def __init__(self, k_tomatov):
        self.tomatoes = [Tomato(i) for i in range(num)]
    def grow_all(self):
        pass
    def all_are_ripe(self):
        pass
    def give_away_all(self):
        # del self.tomatoes

# Класс Gardener
# 1. Создайте класс Gardener
# 2. Создайте метод __init__(), внутри которого будут определены два динамических
# свойства: 1) name - передается параметром, является публичным и 2) _plant -
# принимает объект класса Tomato, является protected
# 3. Создайте метод work(), который заставляет садовника работать, что позволяет
# растению становиться более зрелым
# 4. Создайте метод harvest(), который проверяет, все ли плоды созрели. Если все -
# садовник собирает урожай. Если нет - метод печатает предупреждение.
# 5. Создайте статический метод knowledge_base(), который выведет в консоль справку
# по садоводству

class Gardener:
    def __init__(self, name, _plant):
        self.name = name
        self._plant = _plant



# Тесты:
# 1. Вызовите справку по садоводству
# 2. Создайте объекты классов TomatoBush и Gardener
# 3. Используя объект класса Gardener, поухаживайте за кустом с помидорами
# 4. Попробуйте собрать урожай
# 5. Если томаты еще не дозрели, продолжайте ухаживать за ними
# 6. Соберите урожай